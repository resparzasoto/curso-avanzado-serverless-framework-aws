service: curso-avanzado-serverless-framework-aws

frameworkVersion: "3"

plugins:
  - serverless-dynamodb
  - serverless-offline

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs18.x
  architecture: x86_64
  apiGateway:
    apiKeys:
      - curso-avanzado-serverless-framework-aws-api-key
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: !GetAtt UsersDynamoDBTable.Arn
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            Fn::Join:
            - ""
            - - !GetAtt S3Bucket.Arn
              - /*

custom:
  config:
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}

  serverless-dynamodb:
    stages:
      - dev
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      noStart: false
    migration:
      dir: offline/migrations
    seed:
      initial:
        sources:
          - table: Users
            sources: [./dynamodb/offline/seeds/users.json]

package:
  individually: true
  patterns:
    - '!*.*'
    - '!.*/**'
    - '!dist/**'
    - '!createUsers/**'
    - '!deleteUsers/**'
    - '!dynamodb/**'
    - '!getUsers/**'
    - '!helloWorld/**'
    - '!schemas/**'
    - '!signedUrl/**'
    - '!thumbnail/**'
    - '!updateUsers/**'


functions:
  createUsers:
    handler: dist/createUsers/handler.createUsers
    name: createUsers
    description: Create users function with typescript
    package:
      patterns:
        - dist/createUsers/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(./schemas/createUserRequestSchema.json)}
    environment:
      USERS_TABLE_NAME: !Ref UsersDynamoDBTable
  getUsers:
    handler: dist/getUsers/handler.getUsers
    name: getUsers
    description: Get users function with typescript
    package:
      patterns:
        - dist/getUsers/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
    environment:
      USERS_TABLE_NAME: !Ref UsersDynamoDBTable
  updateUsers:
    handler: dist/updateUsers/handler.updateUsers
    name: updateUsers
    description: Create users function with typescript
    package:
      patterns:
        - dist/updateUsers/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - http:
          path: users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(./schemas/updateUserRequestSchema.json)}
    environment:
      USERS_TABLE_NAME: !Ref UsersDynamoDBTable
  deleteUsers:
    handler: dist/deleteUsers/handler.deleteUsers
    name: deleteUsers
    description: Delete users function with typescript
    package:
      patterns:
        - dist/deleteUsers/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
    environment:
      USERS_TABLE_NAME: !Ref UsersDynamoDBTable
  signedUrl:
    handler: dist/signedUrl/handler.signedUrl
    name: signedUrl
    description: Obtain signedUrl to upload s3 bucket object
    package:
      patterns:
        - dist/signedUrl/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - http:
          path: signedUrl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
    environment:
      S3_BUCKET_NAME: !Ref S3Bucket
  thumbnailGenerator:
    handler: dist/thumbnail/handler.generator
    name: thumbnail
    description: Obtain thumbnail to upload s3 bucket object
    package:
      patterns:
        - dist/thumbnail/**/*.js
    layers:
      - !Ref BaseLambdaLayer
    memorySize: 128
    runtime: nodejs18.x
    timeout: 15
    events:
      - s3:
          bucket: !Sub "public-bucket-${AWS::AccountId}-${self:custom.config.region}-${self:custom.config.stage}"
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: uploads/

layers:
  base:
    name: prd-dependencies
    description: layer for nodejs prd dependencies
    licenseInfo: MIT
    compatibleRuntimes:
      - nodejs18.x
    compatibleArchitectures:
      - x86_64
    package:
      artifact: nodejs-layer.zip

resources:
  Resources:
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        SSESpecification:
          SSEEnabled: true
    S3Bucket:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Delete
      Properties:
        BucketName: !Sub "public-bucket-${AWS::AccountId}-${self:custom.config.region}-${self:custom.config.stage}"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref S3Bucket
                  - /*
              Principal: "*"
